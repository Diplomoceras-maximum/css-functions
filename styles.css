/* === CSS Functions === */

/*

    CSS functions are similar to programming languages in that they are reusable pieces of code that perform specific tasks

    Functions are passed "arguments" between brackets, some examples include::after
    1. rgb() / rgba ()
    2. linear-gradient()
    3. calc()
    4. min() / max()
    5. clamp()

    CSS does not allow the creation of custom functions, they are all premade

    Many CSS functions are important and useful for creating responsive design

*/

/* calc()

    The CSS calc() function performs a calculation and the result is used as the properties' value

    One example of calc() could be to make the content take up most of the height except the height of the navigation, as shown::after

    .content {
        height: calc(100vh - 60px);
    }

    As the viewport resizes the value of 100vh will dynamically update and therefore so will the calculation, however it will always be -60px

    The benefit of calc() is in allowing you to avoid hard-coding a range or using JS to calculate the value needed

    ==============================================================================

    Another example:

    :root {
        --header: 3rem;
        --footer: 40px;
        --main: calc(100vh - calc(var(--header) + var(--footer)));
    }

    --header, --footer, and --main are CSS variables

    In this example, the outcomes is 100vh - (3rem + 40px)
    Calc() can do maths with different units to reduce the need for repeating CSS rules

*/

/* Calc can also be used to create complimentary colours (https://moderncss.dev/practical-uses-of-css-math-functions-calc-clamp-min-max/https://moderncss.dev/practical-uses-of-css-math-functions-calc-clamp-min-max/) */

.colours {
  --base-hue: 140;
  --saturation: 95%;
  --lightness: 80%;
  --rotation: 60;

  color: #222;
  text-align: center;
}

.colour {
  padding: 0.25rem;
  background-color: hsl(var(--hue), var(--saturation), var(--lightness));
}

.colour1 {
  --hue: calc(var(--base-hue));
}

.colour2 {
  --hue: calc(var(--base-hue) + var(--rotation));
}

.colour3 {
  --hue: calc(var(--base-hue) + var(--rotation) * 2);
}

.colour4 {
  --hue: calc(var(--base-hue) + var(--rotation) * 3);
}

.colour5 {
  --hue: calc(var(--base-hue) + var(--rotation) * 4);
}

/* clamp()

    The CSS clamp function takes three values, the first is the lowest value of range, the middle is the ideal value, and the third is the highest value in the range
    
    One example of the clamp function includes making fluid typography, typography that changes size based on the viewport size

    h1 {
      font-size: clamp(1.75rem, 4vw + 1rem, 3rem);
    }

    With this example the h1 will grow and shrink with screen size but will not overflow or take up too much of the screen

    The main benefit of clamp() function is making elements responsive

    ==============================================================================

    Another example:

    .element {
      padding: 1.5rem clamp(1rem, 5%, 3rem);
    }

    In this example the padding has been set to change based on the width of the element, which negates the use of multiple media queries for smaller screens

*/

.content {
  padding: 1.5rem clamp(1rem, 5%, 3rem);
}
